#Anti-TheftBT

Anti-Theft BT is designed to protect your luggage and belongings. It works on Bluetooth so it consumes very less battery. Once you start the service in app, the app start scanning your luggage. Whenever, your luggage leaves your proximity the app raises an alarm to let you know that a luggage has gone missing. The luggage may have an 'embedded bluetooth device' (like HC-06 / HC-05) or, a mobile phone with bluetooth switched ON which can be used as a beacon. When you start Anti-Theft BT (ATBT) for the first time, it asks you for the devices you want to protect. Once you save the list of chosen devices, it is accessible to you until you replace it with a new list of chosen devices (from settings).
Before starting the ATBT service, please ensure that every device in the list is able to get connected to your device. This can be done by tapping the device name in the list. If the icon against it tuns into a green tick, then that device is able to connect to your mobile. If the icon remains red cross, it means there is a problem with the target device. You need to give permissions to target device to automatically connect to your device. If all the devices in the Chosen Device List have green tick, you are good to go! Once you tap the 'Start Service' button, the scanning service starts.
If the Bluetooth accidentally gets turned off midway while the service is running, it is restarted again automatically!
ATBT service runs with higher priority than rest of the default services of android. So, it keeps running until you manually stop it, or your battery runs out :P. This is important so that Android OS doesn't kill this service midway accidentally/automatically due to low memory.
ATBT service can be stopped from 'Stop Service' button in menu.
Logs can be created by tapping 'Start Logging'. It can be stopped by tapping 'Stop Logging' (the same button).
The missing devices list shows the updated list of missing devices, i.e if a device goes missing but it comes in range again, the missing device list won't show it. The refresh button in 'Missing Device List' activity serves the same purpose.
More devices can be added to the 'Chosen Device List' by using the 'Add devices to list' button in Settings menu.
'Reset service' button resets the whole service. Use this only in extreme cases!
'Maximum Connection Time' is the expiry time of an embedded timer of the app. When the app cannot connect to a device within this time, it will raise the alarm. Please use this with care. Default value it 6000 ms. Minimum value is 1000 ms. Average time for a connection to be established is about 5300 ms.
'Delay' is the minimum sleep time between two consecutive connections to devices in the list. Default value is 100 ms. Minimum value is 100 ms.
'Allow device name in log?' button gives you the control whether to include the devices' name in logs or not! This is to protect your privacy.
'Password' button is to reset your password. Default password is nothing (i.e. empty) :P. It also has the option to let you decide whether you want password on every start of app or not. Password field can only accept numerical fields as input.
'Missing Sound Alert' gives you the option of choosing the 'Custom alert audio'.
You can see the missing devices from notifications even when the app is password protected. But you cannot stop the service until you have entered the correct password.


[![](http://lh4.ggpht.com/_OHO4y8YcQbs/TQFWEpSo-UI/AAAAAAAAMpc/DzAbSkhOx3I/s800/greendroid_logo.png)](http://lh4.ggpht.com/_OHO4y8YcQbs/TQFWEpSo-UI/AAAAAAAAMpc/DzAbSkhOx3I/s800/greendroid_logo.png)

Keep in mind this is still a work in progress. There are thousands of things to do and I hope I'll have enough time to develop all of the features I have in mind :)

[![](http://lh4.ggpht.com/_OHO4y8YcQbs/TQFQZTft6OI/AAAAAAAAMpY/hAloaii6kRA/s288/gd7.png)](http://lh4.ggpht.com/_OHO4y8YcQbs/TQFQZTft6OI/AAAAAAAAMpY/hAloaii6kRA/s800/gd7.png)
[![](https://lh6.googleusercontent.com/-DuebAvhlkYo/Ted7VA4WzoI/AAAAAAAAMvc/fs9IRD4ZtgU/s288/gd8.png)](https://lh6.googleusercontent.com/-DuebAvhlkYo/Ted7VA4WzoI/AAAAAAAAMvc/fs9IRD4ZtgU/s800/gd8.png)
[![](https://lh6.googleusercontent.com/-oQoXEMJcO0E/Ted7UeGFemI/AAAAAAAAMvY/HpfJVIVE6-4/s288/gd9.png)](https://lh6.googleusercontent.com/-oQoXEMJcO0E/Ted7UeGFemI/AAAAAAAAMvY/HpfJVIVE6-4/s800/gd9.png)
[![](http://lh6.ggpht.com/_OHO4y8YcQbs/TQFQTfazM2I/AAAAAAAAMpQ/lgPpIKImdZw/s288/gd5.png)](http://lh6.ggpht.com/_OHO4y8YcQbs/TQFQTfazM2I/AAAAAAAAMpQ/lgPpIKImdZw/s800/gd5.png)
[![](http://lh3.ggpht.com/_OHO4y8YcQbs/TQFQS5hyrKI/AAAAAAAAMpM/4hqL9y_tVgM/s288/gd4.png)](http://lh3.ggpht.com/_OHO4y8YcQbs/TQFQS5hyrKI/AAAAAAAAMpM/4hqL9y_tVgM/s800/gd4.png)

A sample application can be downloaded on the [Android Market][gd_catalog_market]

##Contacts

Feel free to contact me for any question related to GreenDroid: bug report, questions about the library, etc. I don't have time to provide personal support but I'll try to look at bug reports and important talks about the GreenDroid philosophy.

##Using GreenDroid in your projects

***Note :*** The previous `greendroid.py` method has been removed from the library. Indeed, this Python script was perfectly functional but wasn't user-friendly (especially for Windows users). Creating libraries for Android is now handled by the ADT plugin.

In order to use GreenDroid you have to do the following steps:

1. Download the GreenDroid library on your computer with a simple: `git clone http://github.com/cyrilmottier/GreenDroid.git`.
   As usual, Git will clone the GreenDroid repository and create a folder GreenDroid that contains a 3 folders:
   * GreenDroid: the core library. This is the code that will be mostly linked to your code
   * GreenDroid-GoogleAPIs: GreenDroid's extension including Google APIs related features (GDMapActivity for instance)
   * GDCatalog: the demonstration application. This project contains a lot of snippet of code showing you how to use GreenDroid.

2. Since [May 2010][adt_history], the ADT plugin added an amazing new feature: the ability to work with library projects.
   Using GreenDroid consists on applying the GreenDroid project as a library to your application. A complete description on how
   to use library projects is given on the [Android documentation website][library_project_doc]. Make sure your
   development environment uses the latest tools and platforms, since older releases of the tools and platforms do not support
   building with library project.
   * In case you want to use some Google APIs features, make sure you are using the GreenDroid-GoogleAPIs library. GreenDroid-GoogleAPIs is based on GreenDroid. As a result, you don't need to link GreenDroid as an Android library to your project.

3. By default, the GreenDroid theme inherits from `@android:style/Theme`. If your project inherits from a different theme, 
   you'll have to modify the GreenDroid library on your own (and do that everytime you are updating GreenDroid as updating 
   deletes all of your changes - still working on a way to overcome that problem). Open the `res/values/gd_themes.xml` and
   replace the parent theme `@android:style/Theme` with your own theme.

4. A lot of GreenDroid's feature (`GDActivity`, `GDListActivity` or `GDTabActivity` for instance) requires your application 
   to be a `GDApplication` so make sure your application is a `GDApplication` class. In order to do that, simply 
   add `android:name="greendroid.app.GDApplication` (where `greendroid.app.GDApplication` may be replaced by  your own class 
   that inherits from `GDApplication`) in the application tag of your `AndroidManifest.xml`.

5. You finally need to make your project use the GreenDroid base theme. In your `AndroidManifest.xml`, go to the application tag 
   and add `android:theme="@style/Theme.GreenDroid"` as a new attribute.

##Using the GDCatalog application

The GreenDroid project includes a demo projet called GDCatalog. This project shows some of the GreenDroid's features. I strongly encourage you to look at it as it's a great way to apprehend the library and understand how to use it in a correct manner.

GDCatalog obviously uses the GreenDroid library. As a result, it won't build until GreenDroid has been applied to it. If your IDE is up-to-date you'll have nothing particular to do. Simply press the "Play" button!

##Documentation

GreenDroid documentation is available online at <http://greendroid.cyrilmottier.com>.

##Software Requirements

BT has been designed for Android 1.6 and greater. It may work on Android 1.5 but I don't want to provide support for this platform as it's way too old ... It has been developed using the following software:

  * Eclipse IDE 3.6
  * Android SDK 4 (android-4)
  * Android Development Tools (ADT) 8.0.1

Go the [Android Developers website][android_developers_website] for complete installation instructions.

##Credits

Copyright Â© Cyril Mottier <cyril@cyrilmottier.com>


[android_developers_website]: http://d.android.com/sdk/installing.html
[personal_blog]: http://android.cyrilmottier.com/?p=240
[adt_history]: http://d.android.com/sdk/eclipse-adt.html#notes
[library_project_doc]: http://developer.android.com/tools/projects/projects-eclipse.html#ReferencingLibraryProject
[gd_catalog_market]: http://market.android.com/details?id=com.cyrilmottier.android.gdcatalog
